package com.alexiv.finish.client;

import com.alexiv.finish.time.Time;
import com.alexiv.finish.utils.Logger;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import java.awt.*;

public class ClientUI extends JFrame {
    private static final String TAG = ClientUI.class.getSimpleName();

    public static void main(String[] args) {
        new ClientUI();
    }

    private JPanel rootPanel;

    private JLabel mTimeLabel;

    private JSpinner mHourSpinner;
    private JSpinner mMinuteSpinner;
    private JSpinner mSecondSpinner;

    private JButton mAddAlarmButton;

    private JTextArea mLogTextArea;

    private JScrollPane mLogScrollPanel;

    private JTextField mActionTextField;

    @NotNull
    private Client mClient;

    interface ClientUICallback {
        void setId(@NotNull String id);

        void alarm(String text);

        void time(Time time);

        void log(String text);

        void exit();
    }

    @NotNull
    private ClientUICallback mCallback = new ClientUICallback() {
        @Override
        public void setId(@NotNull String id) {
            setTitle("Client " + id);
        }

        @Override
        public void alarm(String text) {
            mTimeLabel.setText("ALARM: " + text);
        }

        @Override
        public void time(Time time) {
            mTimeLabel.setText(time.getTime());
        }

        @Override
        public void log(String text) {
            String oldText = mLogTextArea.getText() + "\n";
            mLogTextArea.setText(oldText + text);
        }

        @Override
        public void exit() {
            Logger.d("Client cannot connect to server by socket");
            dispose();
        }
    };

    public ClientUI() {
        super("Client");
        setContentPane(rootPanel);
        setVisible(true);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setSize(500, 300);

        init();
    }

    private void init() {
        mClient = new Client(mCallback);

        mTimeLabel.setFont(new Font("Serif", Font.BOLD, 23));

        mActionTextField.setToolTipText("Action");

        DefaultCaret caret = (DefaultCaret) mLogTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        mHourSpinner.setModel(new SpinnerNumberModel(0, 0, 24, 1));
        mMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 60, 1));
        mSecondSpinner.setModel(new SpinnerNumberModel(5, 0, 60, 1));

        mAddAlarmButton.addActionListener(e -> {
                    mClient.setAlarm(
                            new Time(
                                    (Integer) mHourSpinner.getValue(),
                                    (Integer) mMinuteSpinner.getValue(),
                                    (Integer) mSecondSpinner.getValue()),
                            mActionTextField.getText());

                }
        );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        mTimeLabel = new JLabel();
        mTimeLabel.setText("Label");
        rootPanel.add(mTimeLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSecondSpinner = new JSpinner();
        rootPanel.add(mSecondSpinner, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mMinuteSpinner = new JSpinner();
        rootPanel.add(mMinuteSpinner, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mHourSpinner = new JSpinner();
        rootPanel.add(mHourSpinner, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mAddAlarmButton = new JButton();
        mAddAlarmButton.setLabel("Add Alarm");
        mAddAlarmButton.setText("Add Alarm");
        rootPanel.add(mAddAlarmButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mLogScrollPanel = new JScrollPane();
        rootPanel.add(mLogScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mLogTextArea = new JTextArea();
        mLogTextArea.setEditable(false);
        mLogTextArea.setEnabled(true);
        mLogScrollPanel.setViewportView(mLogTextArea);
        mActionTextField = new JTextField();
        mActionTextField.setToolTipText("");
        rootPanel.add(mActionTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Action:");
        rootPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
