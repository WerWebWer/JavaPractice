package com.alexiv.finish.client;

import com.alexiv.finish.utils.Time;
import com.alexiv.utils.Logger;

import javax.swing.*;
import java.awt.*;

public class ClientUI extends JFrame {

    public static void main(String[] args) {
        new ClientUI();
    }

    private JPanel rootPanel;

    private JLabel mTimeLabel;
    private JLabel mLogLabel;

    private JSpinner mHourSpinner;
    private JSpinner mMinuteSpinner;
    private JSpinner mSecondSpinner;

    private JButton mAddAlarmButton;

    private Client mClient;

    interface ClientUICallback {
        void alarm();
        void time(Time time);
        void log(String text);
        void exit();
    }

    private ClientUICallback mCallback = new ClientUICallback() {
        @Override
        public void alarm() {
            mTimeLabel.setText("ALARM!!!");
        }

        @Override
        public void time(Time time) {
            mTimeLabel.setText(time.getTime());
        }

        @Override
        public void log(String text) {
            mLogLabel.setText(text);
        }

        @Override
        public void exit() {
            Logger.d("Client cannot connect to socket");
            dispose();
        }
    };

    public ClientUI() {
        super("Client");
        setContentPane(rootPanel);
        setVisible(true);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setSize(500, 200);

        init();
    }

    private void init() {
        mClient = new Client(mCallback);

        mTimeLabel.setFont(new Font("Serif", Font.BOLD, 23));

        mHourSpinner.setModel(new SpinnerNumberModel(0, 0, 24, 1));
        mMinuteSpinner.setModel(new SpinnerNumberModel(0, 0, 60, 1));
        mSecondSpinner.setModel(new SpinnerNumberModel(5, 0, 60, 1));

        mAddAlarmButton.addActionListener(e -> {
            mClient.setAlarm(new Time(
                    (Integer) mHourSpinner.getValue(),
                    (Integer) mMinuteSpinner.getValue(),
                    (Integer) mSecondSpinner.getValue()));
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        mTimeLabel = new JLabel();
        mTimeLabel.setText("Label");
        rootPanel.add(mTimeLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mLogLabel = new JLabel();
        mLogLabel.setText("Label");
        rootPanel.add(mLogLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        rootPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mSecondSpinner = new JSpinner();
        rootPanel.add(mSecondSpinner, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mMinuteSpinner = new JSpinner();
        rootPanel.add(mMinuteSpinner, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mHourSpinner = new JSpinner();
        rootPanel.add(mHourSpinner, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mAddAlarmButton = new JButton();
        mAddAlarmButton.setLabel("Add Alarm");
        mAddAlarmButton.setText("Add Alarm");
        rootPanel.add(mAddAlarmButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
